library(shiny); runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp('app_revised.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# UI demonstrating column layouts
ui <- fluidPage(
title = "Hello Shiny!",
fluidRow(
column(width = 4,
"4"
),
column(width = 3, offset = 2,
"3 offset 2"
)
)
)
shinyApp(ui, server = function(input, output) { })
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
library(shiny)
library(tidyverse)
library(leaflet)
library(DT)
library(shinythemes)
pslist <- read_tsv("AllPOlist.csv")
View(pslist)
pslist <- read_tsv("AllPOlist.csv",col_names = TRUE)
View(pslist)
pslist <- read_csv("AllPOlist.csv",col_names = TRUE)
View(pslist)
runApp()
runApp('F:/R WD/ConsumerSurvey/postOffices.R')
runApp('F:/R WD/ConsumerSurvey/postOffices.R')
rm(list=ls())
runApp('postOffices.R')
runApp('postOffices.R')
library(shiny)
library(tidyverse)
library(DT)
library(shinythemes)
library(visNetwork)
pslist <- read_csv("AllPOlist.csv",col_names = TRUE)
# some data wrangling to produce nodes and edges for the network
View(pslist)
psnode <- pslist %>% mutate(id <- row_number())
View(psnode)
psnode <- psnode[ , c(14,2:13)]
View(pslist)
psnode <- pslist %>% mutate(id <- row_number())
View(psnode)
psnode <- psnode[ , c(14,1:13)]
View(psnode)
psnode$RSO <- psnode$`Related Suboffice`
psnode$RHO <- psnode$`Related Headoffice`
View(psnode)
psnode <-psnode[ , c(1:12,15,16)]
View(psnode)
psnodeBO <- psnode[which (psnode$officeType == 'B.O'), ]
psnodeSO <- psnode[which(psnode$officeType == 'S.O')]
psnodeSO <- psnode[which(psnode$officeType == 'S.O'), ]
psnodeBOE <- psnodeBO[ ,c(1,2,13)]
View(psnodeBOE)
psnodeBOE$from <-psnodeBOE$officename
psnodeBOE$to <-psnodeBOE$RSO
head(psnodeBOE)
psnodeSOE <- psnodeSO[ ,c(1,2,14)]
View(psnodeSOE)
psnodeSOE$from <-psnodeSOE$officename
psnodeSOE$to <-psnodeSOE$RHO
psnodeSOE <-psnodeSOE[ ,c(1,4,5)]
View(psnodeBOE)
psnodeBOE <- psnodeBOE[ , c(1,4,5)]
psAllEdges <- bind_rows(psnodeBOE,psnodeSOE)
psnodeBOMin <- psnodeBO[ ,c(1:3)]
psnodeSOMin <- psnodeSO[ ,c(1:3)]
psAllNodes <- bind_rows(psnodeBOMin,psnodeSOMin)
View(psAllNodes)
View(psAllEdges)
visNetwork(psAllnodes[1:100,],psAllEdges[1:100,])
visNetwork(psAllNodes[1:100,],psAllEdges[1:100,])
# A shiny app on complete postal data
library(shiny)
library(tidyverse)
library(DT)
library(shinythemes)
library(visNetwork)
pslist <- read_csv("AllPOlist.csv",col_names = TRUE)
# some data wrangling to produce nodes and edges for the network
View(pslist)
psnode <- pslist %>% mutate(id <- row_number())
View(psnode)
psnode <- psnode[ , c(14,2:13)]
View(pslist)
psnode <- pslist %>% mutate(id <- row_number())
View(psnode)
psnode <- psnode[ , c(14,1:13)]
View(psnode)
psnode$RSO <- psnode$`Related Suboffice`
psnode$RHO <- psnode$`Related Headoffice`
View(psnode)
psnode <-psnode[ , c(1:12,15,16)]
View(psnode)
psnodeBO <- psnode[which (psnode$officeType == 'B.O'), ]
psnodeSO <- psnode[which(psnode$officeType == 'S.O')]
psnodeSO <- psnode[which(psnode$officeType == 'S.O'), ]
psnodeBOE <- psnodeBO[ ,c(1,2,13)]
View(psnodeBOE)
psnodeBOE$from <-psnodeBOE$officename
psnodeBOE$to <-psnodeBOE$RSO
head(psnodeBOE)
psnodeSOE <- psnodeSO[ ,c(1,2,14)]
View(psnodeSOE)
psnodeSOE$from <-psnodeSOE$officename
psnodeSOE$to <-psnodeSOE$RHO
psnodeSOE <-psnodeSOE[ ,c(1,4,5)]
View(psnodeBOE)
psnodeBOE <- psnodeBOE[ , c(1,4,5)]
psAllEdges <- bind_rows(psnodeBOE,psnodeSOE)
psnodeBOMin <- psnodeBO[ ,c(1:3)]
psnodeSOMin <- psnodeSO[ ,c(1:3)]
psAllNodes <- bind_rows(psnodeBOMin,psnodeSOMin)
View(psAllNodes)
View(psAllNodes)
View(psAllNodes)
psAllNodes$label <-psAllNodes$officename
View(psAllNodes)
psAllEdges$label <-psAllEdges$from
View(psAllEdges)
View(psAllNodes)
str_length(psAllNodes[1,]$officename)
str_sub(psAllNodes,str_length(psAllNodes[1,]$officename-3,3))
str_sub(psAllNodes,str_length(psAllNodes[1,]$officename-3),3))
str_sub(psAllNodes,str_length(psAllNodes[1,]$officename)-3,3))
str_sub(psAllNodes[1,]$officename,str_length(psAllNodes[1,]$officename)-3,3))
str_sub(psAllNodes[1,]$officename,str_length(psAllNodes[1,]$officename)-3,3)
str_length(psAllNodes[1,]$officename
# A shiny app on complete postal data
library(shiny)
library(tidyverse)
library(DT)
library(shinythemes)
library(visNetwork)
pslist <- read_csv("AllPOlist.csv",col_names = TRUE)
# some data wrangling to produce nodes and edges for the network
View(pslist)
psnode <- pslist %>% mutate(id <- row_number())
View(psnode)
psnode <- psnode[ , c(14,2:13)]
View(pslist)
psnode <- pslist %>% mutate(id <- row_number())
View(psnode)
psnode <- psnode[ , c(14,1:13)]
View(psnode)
psnode$RSO <- psnode$`Related Suboffice`
psnode$RHO <- psnode$`Related Headoffice`
View(psnode)
psnode <-psnode[ , c(1:12,15,16)]
View(psnode)
psnodeBO <- psnode[which (psnode$officeType == 'B.O'), ]
psnodeSO <- psnode[which(psnode$officeType == 'S.O')]
psnodeSO <- psnode[which(psnode$officeType == 'S.O'), ]
psnodeBOE <- psnodeBO[ ,c(1,2,13)]
View(psnodeBOE)
psnodeBOE$from <-psnodeBOE$officename
psnodeBOE$to <-psnodeBOE$RSO
head(psnodeBOE)
psnodeSOE <- psnodeSO[ ,c(1,2,14)]
View(psnodeSOE)
psnodeSOE$from <-psnodeSOE$officename
psnodeSOE$to <-psnodeSOE$RHO
psnodeSOE <-psnodeSOE[ ,c(1,4,5)]
View(psnodeBOE)
psnodeBOE <- psnodeBOE[ , c(1,4,5)]
psAllEdges <- bind_rows(psnodeBOE,psnodeSOE)
psnodeBOMin <- psnodeBO[ ,c(1:3)]
psnodeSOMin <- psnodeSO[ ,c(1:3)]
psAllNodes <- bind_rows(psnodeBOMin,psnodeSOMin)
psAllNodes$label <-psAllNodes$officename
psAllEdges$label <-psAllEdges$from
psAllNodes$group <- ifelse(str_detect(psAllNodes$officename, "B.O"),"B.O","S.O")
visNetwork(psAllNodes[1:100,], psAllEdges[1,100,], width = "100%") %>%
visNodes(shape ="circle")%>%
visEdges(arrows ="to") %>%
visGroups(groupname ="B.O", color ="darkblue") %>%
visGroups(groupname ="S.O", color ="darkgreen")
visNetwork(psAllNodes[1:100,], psAllEdges[1:100,], width = "100%") %>%
visNodes(shape ="circle")%>%
visEdges(arrows ="to") %>%
visGroups(groupname ="B.O", color ="darkblue") %>%
visGroups(groupname ="S.O", color ="darkgreen")
nodes <- as.data.frame(psAllNodes)
edges <- as.data.frame(psAllEdges)
visNetwork(nodes[1:100,], edges[1:100,], width = "100%") %>%
visNodes(shape ="circle")%>%
visEdges(arrows ="to") %>%
visGroups(groupname ="B.O", color ="darkblue") %>%
visGroups(groupname ="S.O", color ="darkgreen")
View(nodes)
View(edges)
visNetwork(nodes[1:100,], edges[1:100,], width = "100%") %>%
visNodes(shape ="circle")%>%
visEdges(arrows ="to") %>%
visGroups(groupname ="B.O", color ="yellow") %>%
visGroups(groupname ="S.O", color ="darkgreen")
visNetwork(nodes[1:100,], edges[1:100,], width = "100%") %>%
visNodes(shape ="circle")%>%
visEdges(arrows ="to") %>%
visGroups(groupname ="B.O", color ="pink") %>%
visGroups(groupname ="S.O", color ="darkgreen")
visNetwork(nodes[c(1:100,150000:150045),], edges[c(1:100,150000:150045),], width = "100%") %>%
visNodes(shape ="circle")%>%
visEdges(arrows ="to") %>%
visGroups(groupname ="B.O", color ="pink") %>%
visGroups(groupname ="S.O", color ="darkgreen")
shiny::runApp()
library(shiny); runApp('appwithTabs.R')
runApp('appwithTabs.R')
poAll <- read_csv("AllPOList.csv")
View(poAll)
View(poAll)
library(shiny); runApp('appwithTabs.R')
runApp('appwithTabs.R')
runApp('appwithTabs.R')
runApp('appwithTabs.R')
runApp('appwithTabs.R')
runApp('appwithTabs.R')
runApp('appwithTabs.R')
runApp('appwithTabs.R')
library(shiny); runApp('appwithTabs.R')
runApp('appwithTabs.R')
runApp('appwithTabs.R')
library("formatR")
tidy_app()
tidy_app()
runApp('appformatted.R')
runApp('appformatted.R')
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('appSSP.R')
runApp('appSSP.R')
tibble(x = 1:5, y = 1, z = x ^ 2 + y)
a <-tibble(x = 1:5, y = 1, z = x ^ 2 + y)
n(a)
row_number(a)
row_number(a[ , ])
tally(a)
tally(edges)
b <- a[which(a$x == 0),]
tally(b)
tally(b[1])== 0
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
library(shiny); runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp()
library(shiny); runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
runApp('appSSP.R')
pscode <- read_tsv("India_Geo codes.txt")
View(pscode)
runApp('appSSP.R')
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
for(i in 1:10000000) print("Loading...")
for(i in 1:1000) print("Loading...")
for(i in 1:10000) print("Loading...")
library(shiny); runApp('appnew.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
